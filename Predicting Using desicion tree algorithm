# Iries_Flower_Classification_project_using decision tree _Machine_learning algorithm


# import the necessary libraries to read and analyze the dataset.
import pandas as pd
import numpy as np
from sklearn.datasets import load_iris
from sklearn.metrics import accuracy_score


# Reading the Iris.csv file
data = load_iris()


# Extracting Attributes / Features
X = data.data


# Extracting Target / Class Labels
y = data.target


# Import Library for splitting data
from sklearn.model_selection import train_test_split


# Creating Train and Test datasets
X_train, X_test, y_train, y_test = train_test_split(X,y, random_state = 50, test_size = 0.25)


# Creating Decision Tree Classifier
from sklearn.tree import DecisionTreeClassifier
clf = DecisionTreeClassifier()
clf.fit(X_train,y_train)


# Predict Accuracy Score
y_pred = clf.predict(X_test)
print("Train data accuracy:",accuracy_score(y_true = y_train, y_pred=clf.predict(X_train)))
print("Test data accuracy:",accuracy_score(y_true = y_test, y_pred=y_pred))




# Train a DecisionTreeClassifier on iris dataset and  We will use default hyper-parameters for the classifier.
from matplotlib import pyplot as plt
from sklearn import datasets
from sklearn.tree import DecisionTreeClassifier 
from sklearn import tree


# Prepare the data data
iris = datasets.load_iris()
X = iris.data
y = iris.target


# Fit the classifier with default hyper-parameters
clf = DecisionTreeClassifier(random_state=1234)
model = clf.fit(X, y)


# Print Text Representation
text_representation = tree.export_text(clf)
print(text_representation)


# If we want to save it to the file, it can be done with following code:
with open("decistion_tree.log", "w") as fout:
fout.write(text_representation)



# Plot Tree with plot_tree
fig = plt.figure(figsize=(10,5))
_ = tree.plot_tree(clf, 
                   feature_names=iris.feature_names,  
                   class_names=iris.target_names,
                   filled=True)
                   
                   
# To save the figure to the .png file:
 fig.savefig("decistion_tree.png")
 
 
 
# Visualize Decision Tree with graphviz
 import graphviz
# DOT data
dot_data = tree.export_graphviz(clf, out_file=None, 
                                feature_names=iris.feature_names,  
                                class_names=iris.target_names,
                                filled=True)


# Draw graph
  graph = graphviz.Source(dot_data, format="png") 
  graph
  
  graph.render("decision_tree_graphivz")
  'decision_tree_graphivz.png'
  
  
# Plot Decision Tree with dtreeviz Package
# Install libraries
  !pip install -q dtreeviz
  !apt-get install graphviz
  
  
# remember to load the package
  import dtreeviz 
  viz = dtreeviz.model(clf, X, y,
                target_name="target",
                feature_names=iris.feature_names,
                class_names=list(iris.target_names))

   viz.view(scale=1.5)
   
   
   
 #  ******************** END ******************
